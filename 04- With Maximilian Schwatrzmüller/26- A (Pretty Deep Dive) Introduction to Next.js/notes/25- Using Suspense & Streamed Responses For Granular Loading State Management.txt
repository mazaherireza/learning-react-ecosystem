Using Suspense & Streamed Responses For Granular Loading State Management
-------------------------------------------------------------------------
... it would be great if we could show this Header instantly 
and only show that loading text whilst we're waiting for the meals to be fetched.

... NextJS also gives us another way of handling loading states, a more granular way.

page.js
-------
...
... create a separate component, ...
const Meals = async () => { <------------ ... this component, will fetch the data.
  const meals = await getMeals();

  return <MealsGrid meals={meals} />
}

const MealsPage = () => {
  
}

... what's the advantage of this approach?
... we now outsourced the data fetching part, into a separate component and we can now wrap this component
with a component that's built into React.
...
import { Suspense } from "react";

<Suspense fallback={}> <-------- Allows you to handle loading states & 
                                 show fallback content until some data or resource has been loaded.
  <Meals />
</Suspense>

... NextJS embraces this Suspense component ...
... loading.js file ... is doing the same thing just behind the scense.