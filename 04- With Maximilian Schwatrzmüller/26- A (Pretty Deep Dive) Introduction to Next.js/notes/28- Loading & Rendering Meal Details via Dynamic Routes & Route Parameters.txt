Loading & Rendering Meal Details via Dynamic Routes & Route Parameters
----------------------------------------------------------------------
... responsible for outputting the details about a meal.

meals
  [mealSlug]
    page.js

page.js
-------
import Image from "next/image";

const MealDetailsPage = () => {
  ...
    <Image fill /> <--------- I won't know the exact dimensions of the image file yet, ...
  ...
  by <a href={`mailto:${EMAIL} ...
  ... I'll use the regular anchor element, because this should actually be a link that allows us
  to send an email to that creator. ... open the mail program ...
  ...
  ... should actually be output as HTML code, which can be achieved in React, 
  by targeting the dangerouslySetInnerHTML prop on an element. <------------------- *

  <p dangerouslySetInnerHTML={{ __html: "..." }}

... it's called like this, because you open yourself up to cross-site scripting attacks 
when outputting content as HTML content, at least if you're not validating it.
... this props then wants an object as a value, ... should have an __html property,
...

... in order to have some data ... go back to the meals.js file in the lib folder,

meals.js
--------
...
const getMeal = async (slug) => db.prepare("SELECT * FROM meals WHERE slug = ?").get(slug);
... would be insecure. ... opens yourself up to SQL injection.

page.js
-------
...
import { getMeal } from "@/lib/meals";
...
const MealDetailsPage = async ({ params }) => {
  const { slug } = await params;
  const meal = getMeal(mealSlug);
 
... getMeal of course needs that slug.
... is simply that part that's encoded in the URL ... mealSlug placeholder ...
... how do we then get access to that concrete value that's part of the URL?

With help of the props we're receiving on this page. <--------------- **
... NextJS is passing some special props to these components in these special files.