Import & Export
---------------
... it is considered a best practice to split your code across multiple files 
to keep it maintainable and manageable. <-------------- **

utils.js
--------
export const API_KEY = "Something"; 

... by adding the export keyword in front of it.
This makes this variable, available outside of this file as well.
We can then import it in the file where it should be used ... by using the import keyword.

app.js
------
import { API_KEY } from "./utils.js" 
<-------- ... the name of the file with the extension added at least if you're using just JS.

... React projects ... build process that adds the extension for us, not add it on our own.
... very important for these import and export keywords to work, you must be using this type="module" ...

index.html
----------
...
<script src... type="module"></script> <------------ **

... you won't see that for the React projects ... 
... automatically injected script tags , you don't find this type="module" attribute on them. <------- **

... build process will actually take all your imports and exports  <----------- **
and basically merge all these separate files that you have during development,
into one big fil or a bunch of big files, which are then imported with the old school syntax in the right order.

This is done to also make this code, execute in browsers that don't natively support this import export syntax,
and also so that the browsers doesn't have to download dozens of small JS files,
but instead just a couple of bigger files, which typically is more efficient.

Besides exporting with help of the export keyword in front of a variable of function,
... default export, by adding the default keyword.

... you must not create a variable ..., don't assign a name, <------------ **
... just export the value ...

utils.js
--------
export default "Something"; <------------ **
(I'm saying this value, should be the default thing that's exported by this file) <------------ **
... you must only have one default export per file.

app.js
------
... without {}, just assign any name of your choice, <------------ **
since the thing that's exported as a default doesn't have a name.

import APIKEY from "./utils.js"

... instead of listing all the things you want to import ... as a comma seprated list between {},
you can also import them by grouping them together into a JS object ... by using * ...

app.js
------
...
import * as util from "./utils.js"
util.default <---------- **

... as keyword, can also be used to assign aliases.