How React Handles Components & How It Builds A Component Tree, Core Concepts
----------------------------------------------------------------------------
... how that component's content ended up on the website and our screen.

... inspect the source code ... view page source Ctrl + U <--------------- **
... you don't find the header or any other website content in that source code.

It just contains some metadata and at least one JS import ... the index.jsx file ...
...
<script type="module" src="/src/index.jsx"></script>
...
... this index.jsx file is the key, because the code that is loaded and executed here is in the end 
the transformed React code you wrote. <----------------- ***

... index.jsx file being loaded here is the actual website source code <-------------- **
because that's also what we see here in our project, in the index.html file.
... this index.html file being served to the website visitors.

... this index.jsx file, acts as the main entry point of our React app <-------------- **
since it is the first file to be loaded by the HTML file. <-------------- **
And it's in this place (index.jsx file) where the React app boots up, ... <-------------- **

... ReactDOM ... outputting the App component's content on the screen, ...

... set as a root for the React project, 
React goes ahead and injects a React component (the App component) into this element ...

... the elements tab, you see more that just the initial HTML structure ...
... they are inside of that div with the id "root".

So the createRoot and the render method are responsible for rendering a single root component
(the App component) which in turn may contain as many nested components as needed.

How components get rendered
---------------------------
App <-------------- Root Component
The first component to be analyzed & rendered by React

Header <----------- Nested Component
A child component of its parent component (of the App component in this case)

... ultimately you end up with component hierarchy, which is often called a tree of components ...

Building a component hierarchy

App <---------- Root Component
Component Tree <--- A hierarchy of components, analyzed & rendered by React step-by-step

... <---- Deeply nested component

... your custom components are not showing up in the actual rendered DOM,
there, you only find default HTML elements, ...

So your tree of components in the end, just analyzed by React and React then combines all the JSX code
from all those components to generate the overall DOM, the elements that are showing up on the screen.

... custom components ... must start with an uppercase character ... 
to tell React that it's not a built-in component.

Built-in components like div , ... are rendered as DOM nodes by React 
... custom components are just functions ... are executed as functions by React 
... takes the returned JSX code, and start analyzing that code until it ends up 
with only built-in elements at a certain point of time ... rendered to the screen.

Built-in components vs custom components
----------------------------------------
Built-in components

Name starts with a lowercase character
Only valid, officially defined HTML elements are allowed
Are rendered as DOM nodes by React

Custom components
...
Defined by you, "wraps" built-in or other custom components
React "traverses" the component tree until it has only built-in components left <----------- **