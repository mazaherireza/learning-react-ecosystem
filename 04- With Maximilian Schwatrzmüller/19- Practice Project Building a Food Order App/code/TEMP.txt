"use client";

import { type ReactNode, Ref, useEffect, useRef, useState } from "react";

import TypographyComponent from "@/components/typography/typography.component";

import { assertIsNode } from "@/utils/node.util";

import styles from "./dialog.module.css";

type Props = {
  ref: Ref<HTMLDialogElement>;
  title: string;
  open: () => void;
  close: () => void;
  children: ReactNode;
};

export default function DialogComponent({
  ref,
  title,
  open,
  close,
  children,
}: Props): ReactNode {
  const dialogRef = useRef<HTMLDialogElement>(null);

  useEffect(() => {
    const checkIfClickedOutside = ({ target }: MouseEvent): (() => void) => {
      console.log("Document");
      assertIsNode(target);
      if (dialogRef?.current && dialogRef.current?.contains(target)) {
        dialogRef.current?.close();
      }
      document.addEventListener("mousedown", checkIfClickedOutside);
      return () => {
        document.removeEventListener("mousedown", checkIfClickedOutside);
      };
    };
  }, [open]);

  return (
    <dialog
      ref={(element) => {
        dialogRef.current = element;
        if (typeof ref === "function") {
          ref(element);
        } else {
          if (ref?.current) ref.current = element;
        }
      }}
      className={styles.dialog}
      onClose={close}
    >
      <header>
        <TypographyComponent variant="h6">{title}</TypographyComponent>
      </header>
      {children}
    </dialog>
  );
}
